{"version":3,"sources":["assets/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","useState","query","setQuery","RequestUrl","ip","setIP","lat","setLat","lng","setLng","country","setCountry","fetchData","a","axios","get","result","data","location","className","src","alt","onChange","eventHandle","target","value","type","placeholder","onClick","preventDefault","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySA+DeA,MA3Df,WAAmB,IAAD,EACUC,mBAAS,CAAC,KADpB,mBACTC,EADS,KACFC,EADE,KAGVC,EAAU,8CADD,mCACC,sBAA8DF,GAH9D,EAKID,mBAAS,IALb,mBAKTI,EALS,KAKLC,EALK,OAMML,mBAAS,IANf,mBAMTM,EANS,KAMJC,EANI,OAOMP,mBAAS,IAPf,mBAOTQ,EAPS,KAOJC,EAPI,OAQcT,mBAAS,IARvB,mBAQTU,EARS,KAQAC,EARA,KAUVC,EAAS,uCAAG,4BAAAC,EAAA,sEACKC,IAAMC,IAAIZ,GADf,OACVa,EADU,OAGhBX,EAAMW,EAAOC,KAAKb,IAClBG,EAAOS,EAAOC,KAAKC,SAASZ,KAC5BG,EAAOO,EAAOC,KAAKC,SAASV,KAC5BG,EAAWK,EAAOC,KAAKC,SAASR,SAChCR,EAAS,IAPO,2CAAH,qDAgBf,OACE,6BACE,yBACEiB,UAAU,aACVC,IAAI,0CACJC,IAAI,KAEN,yBAAKF,UAAU,eACb,2BACEG,SAhBS,SAACC,GAChBrB,EAASqB,EAAYC,OAAOC,QAgBtBA,MAAOxB,EACPkB,UAAU,eACVO,KAAK,OACLC,YAAY,SAEd,4BAAQC,QAnBE,SAACL,GACfA,EAAYM,iBACZjB,KAiB8BO,UAAU,iBAApC,WAIF,yBAAKA,UAAU,iBACb,2BACG,IADH,8CAE8C,IAC5C,uBAAGA,UAAU,0BAA0Bf,IAEzC,yCAAeE,EAAf,KACA,0CAAgBE,EAAhB,KACA,wCAAcE,EAAd,QC1COoB,MAXf,WACE,OACE,yBAAKX,UAAU,OAEb,yBAAKA,UAAU,cACb,kBAAC,EAAD,SCGYY,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71533ffa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n  const [query, setQuery] = useState([\"\"]);\r\n  const APIkey = \"at_qKYpEv26BnSr0rb8inccQrKCNoFAf\";\r\n  const RequestUrl = `https://geo.ipify.org/api/v1?apiKey=${APIkey}&ipAddress=${query}`;\r\n\r\n  const [ip, setIP] = useState([]);\r\n  const [lat, setLat] = useState([]);\r\n  const [lng, setLng] = useState([]);\r\n  const [country, setCountry] = useState([]);\r\n\r\n  const fetchData = async () => {\r\n    const result = await axios.get(RequestUrl);\r\n\r\n    setIP(result.data.ip);\r\n    setLat(result.data.location.lat);\r\n    setLng(result.data.location.lng);\r\n    setCountry(result.data.location.country);\r\n    setQuery(\"\");\r\n  };\r\n  const onChange = (eventHandle) => {\r\n    setQuery(eventHandle.target.value);\r\n  };\r\n  const onClick = (eventHandle) => {\r\n    eventHandle.preventDefault();\r\n    fetchData();\r\n  };\r\n  return (\r\n    <div>\r\n      <img\r\n        className=\"header_img\"\r\n        src=\"https://censys.io/static/img/censys.png\"\r\n        alt=\"\"\r\n      />\r\n      <div className=\"search-wrap\">\r\n        <input\r\n          onChange={onChange}\r\n          value={query}\r\n          className=\"search-input\"\r\n          type=\"text\"\r\n          placeholder=\"IPv4\"\r\n        ></input>\r\n        <button onClick={onClick} className=\"search-button\">\r\n          Search\r\n        </button>\r\n      </div>\r\n      <div className=\"search-result\">\r\n        <p>\r\n          {\" \"}\r\n          Showing results for following IPv4 address:{\" \"}\r\n          <p className=\"search-result-ip-color\">{ip}</p>\r\n        </p>\r\n        <p> Latitude: {lat} </p>\r\n        <p> Longitude: {lng} </p>\r\n        <p> Country: {country} </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport Header from \"./assets/Header.js\";\n//BEM\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* Header Componenet */}\n      <div className=\"app-header\">\n        <Header />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}